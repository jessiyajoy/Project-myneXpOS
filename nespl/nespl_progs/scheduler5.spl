alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

//SCHED_LOCK must be acquired by calling AcquireSchedLock()
multipush(R0);
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R0);

multipush(BP);

// Get Process Table for curr and Save KPTR, PTBR, PTLR
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;

if( CORE == PRIMARY_CORE ) then

    // check Paging Status Field in SYSTEM_STATUS_TABLE
    if([SYSTEM_STATUS_TABLE + 5] != 0) then
        // paging process is executing a disk operation (SWAPPER DAEMON is BLOCKED)
        if ([PROCESS_TABLE + SWAPPER_DAEMON*16 + 4] == WAIT_DISK) then
            // IDLE PROCESS PID = 0
            newPID = IDLE_PROCESS;
        else
            newPID = SWAPPER_DAEMON;
        endif;
    else
        // If LOGOUT_STATUS=1 & secondary core is not running IDLE2
        // schedule IDLE (wait for the current running process to be scheduled out of the secondary core)
        if ([SYSTEM_STATUS_TABLE+7] == 1 && [SYSTEM_STATUS_TABLE+6] != IDLE2_PROCESS) then
            newPID = IDLE_PROCESS;
            goto pidFound;
        endif;

        // Round Robin
        newPID = currentPID + 1;
        alias count R3;
        count = 1;
        while(count <= 16) do

            // IDLE2 is scheduled only in the secondary & process currently running on secondary core must not be scheduled
            if( newPID == SWAPPER_DAEMON || newPID == IDLE2_PROCESS || newPID == [SYSTEM_STATUS_TABLE+6]) then
                goto cont;
            endif;

            if(([PROCESS_TABLE + (newPID*16) + 4] == READY || [PROCESS_TABLE + (newPID*16) + 4] == CREATED) && [PROCESS_TABLE + (newPID*16) + 6] == 0) then
                break;
            endif;
            cont:
                newPID = ((newPID + 1)%16);
                count = count + 1;
        endwhile;

        if(count >= 17) then
            newPID = 0;

        endif;
    
    endif;
    
else
    //-------- SECONDARY CORE

    // If PAGING_STATUS or LOGOUT_STATUS is set , IDLE2 must be scheduled
    if([SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE+7] == 1) then
        newPID = IDLE2_PROCESS;
        goto pidFound;
    else

        // Round Robin
        newPID = currentPID + 1;
        alias count R3;
        count = 1;
        while(count <= 16) do

            // IDLE (PID=0), LOGIN (PID=1), SHELL (PID=2) and SWAPPER_DAEMON (PID=15) should never be scheduled
            // Process which is currently running on the primary core must not be scheduled
            if(newPID == IDLE_PROCESS || newPID == LOGIN_PROCESS || newPID == SHELL_PROCESS || newPID == SWAPPER_DAEMON || newPID == [SYSTEM_STATUS_TABLE+1]) then
                goto cont;
            endif;

            if(([PROCESS_TABLE + (newPID*16) + 4] == READY || [PROCESS_TABLE + (newPID*16) + 4] == CREATED) && [PROCESS_TABLE + (newPID*16) + 6] == 0) then
                break;
            endif;
            cont:
                newPID = ((newPID + 1)%16);
                count = count + 1;
        endwhile;

        if(count >= 17) then
            newPID = 14;
        endif;
    
    endif;

endif ;

pidFound : 
[SYSTEM_STATUS_TABLE + 5*CORE + 1] = newPID;




alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID*16;

SP = [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

if([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
    [new_process_table + 4] = RUNNING;
    [new_process_table + 9] = 0;
    // Set the Value for BP from Kernel Stack Top
    BP = [[PROCESS_TABLE + newPID*16 + 11]*512];

    // SCHED_LOCK must be released by calling ReleaseLock()
    R1 = ACQUIRE_SCHED_LOCK;
    R2 = SCHED_LOCK;
    call RELEASE_LOCK;

    ireturn;
endif;

[new_process_table + 4] = RUNNING;

multipop(BP);

// SCHED_LOCK must be released by calling ReleaseLock()
R1 = ACQUIRE_SCHED_LOCK;
R2 = SCHED_LOCK;
call RELEASE_LOCK;

return;